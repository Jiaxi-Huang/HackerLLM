{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, Fragment as _Fragment, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"innerHTML\"];\nconst _hoisted_3 = {\n  key: 1,\n  class: \"sc-message--edited\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_beautiful_chat = _resolveComponent(\"beautiful-chat\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_beautiful_chat, {\n    \"always-scroll-to-bottom\": $data.alwaysScrollToBottom,\n    close: $options.closeChat,\n    colors: $data.colors,\n    \"is-open\": $data.isChatOpen,\n    \"message-list\": $data.messageList,\n    \"message-styling\": $data.messageStyling,\n    \"new-messages-count\": $data.newMessagesCount,\n    \"on-message-was-sent\": $options.onMessageWasSent,\n    open: $options.openChat,\n    participants: $data.participants,\n    \"show-close-button\": true,\n    \"show-launcher\": true,\n    \"show-emoji\": false,\n    \"show-file\": false,\n    \"show-typing-indicator\": $data.showTypingIndicator,\n    \"show-edition\": true,\n    \"show-deletion\": true,\n    \"show-confirmation-deletion\": true,\n    \"confirmation-deletion-message\": '你可以问我一些网络安全相关知识',\n    \"title-image-url\": $data.titleImageUrl,\n    \"disable-user-list-toggle\": false,\n    onOnType: $options.handleOnType,\n    onEdit: $options.editMessage,\n    onRemove: $options.removeMessage\n  }, {\n    header: _withCtx(() => [_createTextVNode(\" chat between \" + _toDisplayString($data.participants.map(m => m.name).join(' & ')), 1 /* TEXT */)]),\n    \"text-message-toolbox\": _withCtx(scopedProps => [!scopedProps.me && scopedProps.message.type === 'text' ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      onClick: _withModifiers($event => $options.like(scopedProps.message.id), [\"prevent\"])\n    }, \" 👍 \", 8 /* PROPS */, _hoisted_1)) : _createCommentVNode(\"v-if\", true)]),\n    \"text-message-body\": _withCtx(scopedProps => [_createElementVNode(\"p\", {\n      class: \"sc-message--text-content\",\n      innerHTML: scopedProps.messageText\n    }, null, 8 /* PROPS */, _hoisted_2), scopedProps.message.data.meta ? (_openBlock(), _createElementBlock(\"p\", {\n      key: 0,\n      class: \"sc-message--meta\",\n      style: _normalizeStyle({\n        color: scopedProps.messageColors.color\n      })\n    }, _toDisplayString(scopedProps.message.data.meta), 5 /* TEXT, STYLE */)) : _createCommentVNode(\"v-if\", true), scopedProps.message.isEdited || scopedProps.message.liked ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, [scopedProps.message.isEdited ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 0\n    }, [_createTextVNode(\"✎\")], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true), scopedProps.message.liked ? (_openBlock(), _createElementBlock(_Fragment, {\n      key: 1\n    }, [_createTextVNode(\"👍\")], 64 /* STABLE_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]),\n    \"system-message-body\": _withCtx(({\n      message\n    }) => [_createTextVNode(\" [System]: \" + _toDisplayString(message.text), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"always-scroll-to-bottom\", \"close\", \"colors\", \"is-open\", \"message-list\", \"message-styling\", \"new-messages-count\", \"on-message-was-sent\", \"open\", \"participants\", \"show-typing-indicator\", \"title-image-url\", \"onOnType\", \"onEdit\", \"onRemove\"])]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createVNode","_component_beautiful_chat","$data","alwaysScrollToBottom","close","$options","closeChat","colors","isChatOpen","messageList","messageStyling","newMessagesCount","onMessageWasSent","open","openChat","participants","showTypingIndicator","titleImageUrl","onOnType","handleOnType","onEdit","editMessage","onRemove","removeMessage","header","_withCtx","_createTextVNode","_toDisplayString","map","m","name","join","scopedProps","me","message","type","onClick","_withModifiers","$event","like","id","_hoisted_1","_createCommentVNode","_createElementVNode","innerHTML","messageText","_hoisted_2","data","meta","style","_normalizeStyle","color","messageColors","isEdited","liked","_hoisted_3","_Fragment","text","_"],"sources":["/root/hackerllm_rag/hackerllm_vue/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <beautiful-chat\n      :always-scroll-to-bottom=\"alwaysScrollToBottom\"\n      :close=\"closeChat\"\n      :colors=\"colors\"\n      :is-open=\"isChatOpen\"\n      :message-list=\"messageList\"\n      :message-styling=\"messageStyling\"\n      :new-messages-count=\"newMessagesCount\"\n      :on-message-was-sent=\"onMessageWasSent\"\n      :open=\"openChat\"\n      :participants=\"participants\"\n      :show-close-button=\"true\"\n      :show-launcher=\"true\"\n      :show-emoji=\"false\"\n      :show-file=\"false\"\n      :show-typing-indicator=\"showTypingIndicator\"\n      :show-edition=\"true\"\n      :show-deletion=\"true\"\n      :show-confirmation-deletion=\"true\"\n      :confirmation-deletion-message=\"'你可以问我一些网络安全相关知识'\"\n      :title-image-url=\"titleImageUrl\"\n      :disable-user-list-toggle=\"false\"\n      @onType=\"handleOnType\"\n      @edit=\"editMessage\"\n      @remove=\"removeMessage\"\n    >\n      <template v-slot:header>\n        chat between {{ participants.map((m) => m.name).join(' & ') }}\n      </template>\n      <template v-slot:text-message-toolbox=\"scopedProps\">\n        <button\n          v-if=\"!scopedProps.me && scopedProps.message.type === 'text'\"\n          @click.prevent=\"like(scopedProps.message.id)\"\n        >\n          👍\n        </button>\n      </template>\n      <template v-slot:text-message-body=\"scopedProps\">\n        <p class=\"sc-message--text-content\" v-html=\"scopedProps.messageText\"></p>\n        <p\n          v-if=\"scopedProps.message.data.meta\"\n          class=\"sc-message--meta\"\n          :style=\"{color: scopedProps.messageColors.color}\"\n        >\n          {{ scopedProps.message.data.meta }}\n        </p>\n        <p\n          v-if=\"scopedProps.message.isEdited || scopedProps.message.liked\"\n          class=\"sc-message--edited\"\n        >\n          <template v-if=\"scopedProps.message.isEdited\">✎</template>\n          <template v-if=\"scopedProps.message.liked\">👍</template>\n        </p>\n      </template>\n      <template v-slot:system-message-body=\"{message}\"> [System]: {{ message.text }} </template>\n    </beautiful-chat>\n\n  </div>\n\n</template>\n\n<script>\nimport messageHistory from './components/messageHistory'\nimport chatParticipants from './components/chatProfiles'\nimport availableColors from './components/colors'\nexport default {\n  name: 'App',\n  components: {\n  },\n  data() {\n    return {\n      participants: chatParticipants,\n      titleImageUrl: 'https://cdn-icons-png.flaticon.com/128/8049/8049563.png',\n      messageList: messageHistory,\n      newMessagesCount: 0,\n      isChatOpen: false,\n      showTypingIndicator: '',\n      colors: null,\n      availableColors,\n      chosenColor: null,\n      alwaysScrollToBottom: true,\n      messageStyling: fals,\n      userIsTyping: false\n    }\n  },\n  computed: {\n    linkColor() {\n      return this.chosenColor === 'dark' ? this.colors.sentMessage.text : this.colors.launcher.bg\n    },\n    backgroundColor() {\n      return this.chosenColor === 'dark' ? this.colors.messageList.bg : '#fff'\n    }\n  },\n  created() {\n    this.setColor('dark')\n  },\n  mounted() {\n    this.messageList.forEach((x) => (x.liked = false))\n  },\n  methods: {\n    // 这里是由robot发送调用的发送函数\n    // user的发送由chat组件完成\n    sendSupportMessage(text) {\n      if (text.length > 0) {\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1\n        this.onMessageWasSent({\n          author: 'support',\n          type: 'text',\n          id: Math.random(),\n          data: {text}\n        })\n      }\n    },\n    sendSystemMessage(text) {\n      if (typeof text === 'string' && text.length > 0) {\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1;\n\n        // 获取当前时间\n        const date = new Date();\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0'); // 月份从0开始，所以要加1\n        const year = date.getFullYear();\n        const hours = String(date.getHours()).padStart(2, '0');\n        const minutes = String(date.getMinutes()).padStart(2, '0');\n\n        // 组合成所需格式\n        const formattedDate = `${month}-${day}-${year} ${hours}:${minutes}`;\n\n        // 发送信息\n        this.onMessageWasSent({\n          type: 'system',\n          id: Math.random(), // 这里可以考虑使用更可靠的唯一 ID 生成方法\n          data: {\n            text: text,\n            meta: formattedDate\n          }\n        });\n      }\n    },\n    handleTyping(text) {\n      this.showTypingIndicator =\n        text.length > 0 ? this.participants[this.participants.length - 1].id : ''\n    },\n    //onMessageWasSent就是发送信息的回调函数\n    onMessageWasSent(message) {\n      // 将信息打在公屏上\n      this.messageList = [...this.messageList, Object.assign({}, message, { id: Math.random() })];\n      // 仅在用户发出信息后进行相关操作\n      if (message.author == \"me\") {\n        console.log('Sending message to backend:', message);\n        let request = {\n          question: message.data.text\n        };\n        console.log(request)\n        fetch(\"http://localhost:8886/api\", {\n          method: 'POST', // 请求方法\n          headers: {\n            'Content-Type': 'application/json', // 请求头，表示请求体是 JSON 格式\n          },\n          body: JSON.stringify(request) // 请求体，将 JavaScript 对象转换为 JSON 字符串\n        })\n        .then(response => {\n          console.log('Response status:', response.status); // 记录响应状态\n          if (!response.ok) {\n            this.sendSystemMessage(\"Internal Server Error\")\n            throw new Error('Network response was not ok');\n          }\n          return response.json();\n        })\n        .then(data => {\n          console.log('Response data:', data); // 记录响应数据\n          // 将机器人的回复发送出去\n          this.sendSupportMessage(data.response);\n        })\n        .catch(error => {\n          this.sendSystemMessage(\"Internal Server Error\")\n          console.error('There has been a problem with your fetch operation:', error);\n        });\n      }\n    },\n    openChat() {\n      this.isChatOpen = true\n      this.newMessagesCount = 0\n    },\n    closeChat() {\n      this.isChatOpen = false\n    },\n    setColor(color) {\n      this.colors = this.availableColors[color]\n      this.chosenColor = color\n    },\n    showStylingInfo() {\n      alert(\n        'You can use *word* to <strong>boldify</strong>, /word/ to <em>emphasize</em>, _word_ to <u>underline</u>, `code` to <code>write = code;</code>, ~this~ to <del>delete</del> and ^sup^ or ¡sub¡ to write <sup>sup</sup> and <sub>sub</sub>'\n      )\n      // this.$modal.show('dialog', {\n      //   title: 'Info',\n      //   text:\n      //     'You can use *word* to <strong>boldify</strong>, /word/ to <em>emphasize</em>, _word_ to <u>underline</u>, `code` to <code>write = code;</code>, ~this~ to <del>delete</del> and ^sup^ or ¡sub¡ to write <sup>sup</sup> and <sub>sub</sub>'\n      // })\n    },\n    messageStylingToggled(e) {\n      this.messageStyling = e.target.checked\n    },\n    handleOnType(e) {\n      this.$event.$emit('onType', e)\n      this.userIsTyping = true\n    },\n    editMessage(message) {\n      const m = this.messageList.find((m) => m.id === message.id)\n      m.isEdited = true\n      m.data.text = message.data.text\n    },\n    removeMessage(message) {\n      const m = this.messageList.find((m) => m.id === message.id)\n      m.type = 'system'\n      m.data.text = 'This message has been removed'\n    },\n    like(id) {\n      const m = this.messageList.findIndex((m) => m.id === id)\n      var msg = this.messageList[m]\n      msg.liked = !msg.liked\n      this.messageList[m] = msg\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: left;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}